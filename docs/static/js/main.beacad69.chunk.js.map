{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GiFGridItem.js","components/GitGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setinputValue","className","onSubmit","e","preventDefault","trim","length","catg","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GiFGridItem","src","alt","GitGrid","loading","state","setState","useEffect","then","useFetchGifs","console","log","GifExpertApp","categories","border","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAc9C,OACA,qBAAKC,UAAU,kBAAf,SAEG,sBAAOC,SAXY,SAACC,GACnBA,EAAEC,iBACEL,EAAWM,OAAOC,OAAS,IAC3BT,GAAe,SAAAU,GAAI,OAAMR,GAAN,mBAAsBQ,OACzCP,EAAc,MAOnB,SAGK,uBACIQ,KAAO,OACPC,MAASV,EACTW,SApBgB,SAACP,GACzBH,EAAcG,EAAEQ,OAAOF,e,+BCRlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,yFAC4EC,UAAWH,IADvF,SAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGGA,EAAKC,OAHR,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAWVM,GAXU,4CAAH,sDCEPO,EAAc,SAAC,GAAsB,IAAnBb,EAAkB,EAAlBA,IAAMU,EAAY,EAAZA,MAEjC,OACI,sBAAKxB,UAAU,OAAf,UACI,4BAAKwB,IACL,qBAAMI,IAAMd,EAAMe,IAAML,QCHvBM,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAe,IAAD,EACdf,mBAAS,CAC/BsB,KAAK,GACLY,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OAVDC,qBAAU,WAETvB,EAAUC,GACTuB,MAAK,SAAAb,GAAG,OAAIW,EAAS,CAClBd,KAAMG,EACNS,SAAS,SAGX,CAAEnB,IAEGoB,EDfiBI,CAAaxB,GAA/BO,EAD+B,EAC/BA,KAAMY,EADyB,EACzBA,QAWd,OAVAM,QAAQC,IAAIP,GAWX,gCACG,qBAAI/B,UAAU,sCAAd,cAAsDY,KACtD,sBAAKZ,UAAU,YAAf,UACC+B,GACC,mBAAG/B,UAAU,qCAAb,0BAGA,6BACGmB,EAAKE,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,gBEnBrBgB,EAAe,WAAO,IAAD,EACI1C,mBAAS,CAAC,WADd,mBACzB2C,EADyB,KACb5C,EADa,KAOhC,OACE,gCACE,iCACE,qBAAKI,UAAU,YAAf,SAEE,qBAAKA,UAAU,cAAf,SACA,qBAAKA,UAAU,yCACb4B,IAAI,yCACJC,IAAI,YACJY,OAAO,YAUb,cAAC,EAAD,CAAa7C,cAAeA,IAE5B,6BACG4C,EAAWnB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MChCxB8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.beacad69.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ({ setcategories} ) => {\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handledInputChangue = (e) =>{\r\n        setinputValue(e.target.value);\r\n    }\r\n    const handledSubmit = (e)=>{\r\n        e.preventDefault();\r\n        if( inputValue.trim().length > 2){\r\n            setcategories( catg => [ inputValue , ...catg]);\r\n            setinputValue('');\r\n        }\r\n       \r\n    }\r\n    return (\r\n    <div className=\"container-input\">\r\n        \r\n       <form  onSubmit= { handledSubmit}>\r\n           \r\n        \r\n            <input\r\n                type = \"text\"\r\n                value= { inputValue}\r\n                onChange= { handledInputChangue}\r\n                > \r\n                </input>\r\n            \r\n        </form> \r\n    </div>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setcategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async ( category )=>{\r\n    const url = `http://api.giphy.com/v1/gifs/search?api_key=V2DyUsS3dSqK8YX5SqVt5a49Oyv2zdrc&q=${ encodeURI( category )}`;\r\n    const resp = await fetch( url );\r\n    const  {data} = await resp.json();\r\n    const gifs = data.map( img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url, // asi aseguramos que va traer la imagen con la ? \r\n        }\r\n    })\r\n      return gifs;\r\n}\r\n","import React from 'react'\r\n\r\nexport const GiFGridItem = ( { url , title} ) => {\r\n   \r\n    return (\r\n        <div className=\"card\">\r\n            <p>{ title }</p> \r\n            <img  src={ url } alt={ title }/>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GiFGridItem } from \"./GiFGridItem\";\r\n\r\nexport const GitGrid = ({ category }) => {\r\n  const { data, loading } = useFetchGifs(category);\r\n  console.log(loading);\r\n  /* \r\n   \r\n\r\n     useEffect( ()=>{\r\n        getGifs( category )\r\n        .then(imgs => setImages(imgs)) // que se ejecute solo cuando es renderizado por primera vez\r\n    }, [ category ]); // el useEffect ya se ejecuto mediante el array vacio por eso no vuelve a renderizar denuevo todo, y repetir las peticiones api\r\n   // le ma ndo category por si quisieramos hacer denuevo la peticion a la api*/\r\n\r\n  return (\r\n   <div>\r\n      <h3 className=\"animate__animated animate__fadeInUp\"> {category}</h3>\r\n      <div className=\"card-grid\">\r\n      {loading && (\r\n        <p className=\"animate__animated animate__fadeOut\">loading.....</p>\r\n      )}\r\n      {\r\n        <ol>\r\n          {data.map((img) => (\r\n            <GiFGridItem key={img.id} {...img} />\r\n          ))}\r\n        </ol>\r\n      }\r\n    </div>\r\n    </div>\r\n    \r\n  );\r\n};\r\n","// Los hooks son funcion\r\nimport  { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true,\r\n    });\r\n    \r\n   useEffect(() => {\r\n\r\n    getGifs(  category )\r\n    .then(img => setState({\r\n        data: img,\r\n        loading: false,\r\n    }))\r\n      \r\n   }, [ category ])\r\n\r\n    return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./AddCategory\";\r\nimport { GitGrid } from \"./GitGrid\";\r\n/* import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faInstagram, faFacebookSquare, faWhatsapp} from \"@fortawesome/fontawesome-free-brands\"; */\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setcategories] = useState([\"Spacex\"]);\r\n  /*   const handledAdd = ()=> {\r\n       // setcategories( [...categories, 'hunter-hunter']);\r\n       setcategories( catg => [...catg, 'HUnterMan']);\r\n    }  */\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <div className=\"gif-title\">\r\n          \r\n          <div className=\"icons-redes\">\r\n          <img className=\"animate__animated animate__slideInLeft\"\r\n            src=\"https://i.ibb.co/PDLvTZs/searchgif.png\"\r\n            alt=\"searchgif\"\r\n            border=\"0\"\r\n          ></img>\r\n          \r\n        </div>\r\n         \r\n        </div>\r\n        \r\n          \r\n      </header>\r\n\r\n      <AddCategory setcategories={setcategories} />\r\n\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GitGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GifExpertApp } from \"./components/GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}